from datetime import timedelta
from django.core.management.base import BaseCommand
from django.utils import timezone
from core.models import Booking, Service, StripeSubscriptionSchedule, StripePriceMap


class Command(BaseCommand):
    help = "Prints a concise diagnostic report of common data issues in bookings, schedules, services, and Stripe mappings."

    def handle(self, *args, **opts):
        now = timezone.localtime()
        horizon = now + timedelta(days=90)

        total_bookings = Booking.objects.count()
        missing_end = Booking.objects.filter(end_dt__isnull=True).count()
        review_flags = Booking.objects.filter(requires_admin_review=True).count()
        future_autogen = Booking.objects.filter(autogenerated=True, start_dt__gte=now).count()
        future_manual = Booking.objects.filter(autogenerated=False, start_dt__gte=now).count()

        services = Service.objects.count()
        services_no_duration = Service.objects.filter(duration_minutes__isnull=True).count() + Service.objects.filter(duration_minutes=0).count()

        schedules = StripeSubscriptionSchedule.objects.count()
        schedules_incomplete = 0
        schedules_inactive = StripeSubscriptionSchedule.objects.filter(sub__active=False).count()
        for s in StripeSubscriptionSchedule.objects.all():
            if not s.is_complete():
                schedules_incomplete += 1

        price_maps = StripePriceMap.objects.count()
        price_maps_inactive = StripePriceMap.objects.filter(active=False).count()

        self.stdout.write("=== Diagnostics ===")
        self.stdout.write(f"Bookings: total={total_bookings}, missing_end={missing_end}, review_flags={review_flags}")
        self.stdout.write(f"  Future: autogenerated={future_autogen}, manual={future_manual}")
        self.stdout.write(f"Services: total={services}, without_duration={services_no_duration}")
        self.stdout.write(f"Schedules: total={schedules}, incomplete={schedules_incomplete}, inactive={schedules_inactive}")
        self.stdout.write(f"StripePriceMap: total={price_maps}, inactive={price_maps_inactive}")
        self.stdout.write(self.style.SUCCESS("Tip:"))
        self.stdout.write(" - Run: python manage.py backfill_booking_end_times")
        self.stdout.write(" - Map Stripe Prices in Admin if list_unmapped_prices shows gaps")
        self.stdout.write(" - Use Admin Tools → Subscriptions – Schedule Status to complete schedules")
