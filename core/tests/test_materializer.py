from datetime import datetime, timedelta
from django.test import TestCase
from core.models import Client, Service, Booking, StripeSubscriptionLink, StripeSubscriptionSchedule
from core.subscription_materializer import materialize_for_schedule

NAIVE_MONDAY = datetime(2025, 10, 20, 9, 0, 0)  # Monday


class MaterializerTests(TestCase):
    def setUp(self):
        self.client_obj = Client.objects.create(
            name="Alice",
            email="a@example.com",
            phone="123",
            address="123 Test St",
            status="active",
            stripe_customer_id="cus_1"
        )
        self.service = Service.objects.create(
            code="walk30",
            name="Walk 30",
            duration_minutes=30,
            is_active=True
        )

    def _make_sched(self, days="MON", time_str="10:30", repeats="weekly", active=True):
        link = StripeSubscriptionLink.objects.create(
            stripe_subscription_id="sub_123",
            client=self.client_obj,
            service_code=self.service.code,
            active=active,
        )
        return StripeSubscriptionSchedule.objects.create(
            sub=link,
            weekdays_csv=days.lower(),
            default_time=time_str,
            days=days,
            start_time=time_str,
            location="Home",
            repeats=repeats,
        )

    def test_materialize_weekly_creates_future_autogen(self):
        sched = self._make_sched(days="MON,WED", time_str="10:30", repeats="weekly", active=True)
        res = materialize_for_schedule(sched, now_dt=NAIVE_MONDAY, horizon_weeks=2)
        self.assertGreaterEqual(res["created"], 3)  # MON & WED for 2 weeks -> >=3 future slots from Monday morning
        b = Booking.objects.filter(schedule=sched, autogenerated=True).first()
        self.assertIsNotNone(b)
        self.assertEqual(b.service, self.service)

    def test_materialize_skips_manual_overlap(self):
        # Pre-create a manual booking at the first slot (Mon 10:30)
        start_dt = datetime(2025, 10, 20, 10, 30)
        Booking.objects.create(
            client=self.client_obj,
            service=self.service,
            service_code=self.service.code,
            service_name=self.service.name,
            service_label=self.service.name,
            start_dt=start_dt,
            end_dt=start_dt + timedelta(minutes=self.service.duration_minutes),
            status="pending",
            location="Home",
            autogenerated=False,
        )
        sched = self._make_sched(days="MON", time_str="10:30", repeats="weekly", active=True)
        res = materialize_for_schedule(sched, now_dt=NAIVE_MONDAY, horizon_weeks=1)
        # Should not duplicate that slot
        self.assertGreaterEqual(res["skipped"], 1)
        self.assertEqual(Booking.objects.filter(start_dt=start_dt).count(), 1)

    def test_materialize_inactive_removes_future_autogen(self):
        sched = self._make_sched(days="MON", time_str="10:30", repeats="weekly", active=True)
        # Create some autogenerated, then deactivate
        materialize_for_schedule(sched, now_dt=NAIVE_MONDAY, horizon_weeks=2)
        count_before = Booking.objects.filter(schedule=sched, autogenerated=True).count()
        self.assertGreater(count_before, 0)
        sched.sub.active = False
        sched.sub.save(update_fields=["active"])
        res = materialize_for_schedule(sched, now_dt=NAIVE_MONDAY, horizon_weeks=2)
        self.assertGreaterEqual(res["removed"], 1)
