from datetime import datetime, timedelta
from unittest.mock import patch
from django.test import TestCase
from core.models import Client, Service, Booking, StripePriceMap
from core.stripe_invoices_sync import sync_invoices, process_invoice


NAIVE_START = datetime(2025, 10, 22, 10, 30)


class InvoiceSyncTests(TestCase):
    def setUp(self):
        self.client_obj = Client.objects.create(
            name="Bob",
            email="b@example.com",
            phone="555",
            address="555 Test St",
            status="active",
            stripe_customer_id="cus_X"
        )
        self.service = Service.objects.create(
            code="walk30",
            name="Walk 30",
            duration_minutes=30,
            is_active=True
        )

    @patch("core.stripe_invoices_sync.stripe.Invoice.list")
    def test_sync_links_by_booking_id(self, mock_list):
        b = Booking.objects.create(
            client=self.client_obj,
            service=self.service,
            service_code=self.service.code,
            service_name=self.service.name,
            service_label=self.service.name,
            start_dt=NAIVE_START,
            end_dt=NAIVE_START + timedelta(minutes=30),
            status="pending",
            location="Home",
            autogenerated=False,
        )
        # Create invoice as dict-like mock object
        class DictLike:
            def __init__(self, d):
                self.__dict__.update(d)
                self._d = d
            def get(self, k, default=None):
                return self._d.get(k, default)
        
        inv = DictLike({
            "id": "in_123",
            "customer": self.client_obj.stripe_customer_id,
            "status": "paid",
            "hosted_invoice_url": "https://example/in_123",
            "invoice_pdf": None,
            "status_transitions": DictLike({"paid_at": 1_690_000_000}),
            "lines": DictLike({"data": [
                DictLike({
                    "id": "il_1",
                    "metadata": {"booking_id": str(b.id), "booking_start": "2025-10-22T10:30:00", "service_code": "walk30"},
                    "price": DictLike({"id": "price_ABC"}),
                    "description": "Walk 30",
                })
            ]}),
        })
        
        class MockResult:
            def __init__(self, data):
                self.data = data
                self.has_more = False
        
        mock_list.return_value = MockResult([inv])
        res = sync_invoices(days=7)
        self.assertEqual(res["linked"], 1)
        b.refresh_from_db()
        self.assertEqual(b.stripe_invoice_id, "in_123")
        self.assertEqual(b.stripe_invoice_status, "paid")
        self.assertTrue(b.invoice_pdf_url)
        self.assertIsNotNone(b.paid_at)

    def test_process_invoice_links_by_price_map_and_start(self):
        # No booking_id in metadata; use price map + booking_start + customer
        StripePriceMap.objects.create(price_id="price_MAPPED", service=self.service, active=True)
        b = Booking.objects.create(
            client=self.client_obj,
            service=self.service,
            service_code=self.service.code,
            service_name=self.service.name,
            service_label=self.service.name,
            start_dt=NAIVE_START,
            end_dt=NAIVE_START + timedelta(minutes=30),
            status="pending",
            location="Home",
            autogenerated=False,
        )
        inv = {
            "id": "in_456",
            "customer": self.client_obj.stripe_customer_id,
            "status": "open",
            "hosted_invoice_url": "https://example/in_456",
            "lines": {"data": [
                {
                    "id": "il_9",
                    "metadata": {"booking_start": "2025-10-22T10:30:00+10:00"},  # Brisbane timezone
                    "price": {"id": "price_MAPPED"},
                }
            ]},
            "status_transitions": {"paid_at": None},
        }
        res = process_invoice(inv)
        self.assertEqual(res["linked"], 1)
        b.refresh_from_db()
        self.assertEqual(b.stripe_invoice_id, "in_456")
        self.assertEqual(b.stripe_invoice_status, "open")
